name: Testing CI/CD with GitHub Actions

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]
  #  types: ["closed"]
  pull_request_target:
    types: ["closed"]
  release:
    # types: ["published"]
    types: ["created"]

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Run Ruff linter
        uses: astral-sh/ruff-action@v1
        with:
          args: "check"
          changed-files: "true"

      - name: Run Ruff formatter
        uses: astral-sh/ruff-action@v1
        with:
          args: "format --check --diff"
          changed-files: "true"

  markdown_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Run mdl
        uses: mjbear/mdl-action@specify_directory
        with:
          style_file: .mdl_style.rb
          directory: tests

  test:
    runs-on: ubuntu-latest
    needs:
      - ruff
      - markdown_lint
    # amended the push conditions so this fires on tag push,
    # but NOT the push+merge since this will fire on PR close
    steps:
    - run: echo "test job"

    # gah, I don't like having to do this ... but at least it's a testing repo
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

  build:
    runs-on: ubuntu-latest
    needs: test
    # if: github.event.pull_request.merged == true
    if: >-
      ${{
      github.event.pull_request.merged == true ||
      github.event_name == 'push' ||
      github.event_name == 'release'
      }}
    steps:
    - run: echo "build job"

  # technically this should be combined with build, this is a test
  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    # if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    if: >-
      ${{
      github.triggering_actor == github.repository_owner ||
      github.event_name == 'release' && github.event.action == 'created'
      }}
    steps:
    - run: echo "deploy job"
